import React, { useState } from "react";
import { Mosaic } from "react-loading-indicators";
import Font, { Text } from 'react-font';
import OpenAI from "openai";
import key from "./key.json";
import Aurora from './Aurora';
import { FileUpload } from './input';

const App = () => {
  const [loading, setLoading] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [menuData, setMenuData] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      setPreview(URL.createObjectURL(file));
    }
  };

  const handleTranslateClick = async () => {
    if (!selectedFile) {
      alert("Please select a file");
      return;
    }

    setLoading(true);
    try {
      // Convert the image file to base64
      const base64Image = await convertFileToBase64(selectedFile);

      // Define the prompt
      const prompt = `{"
       "You are a food and language expert. You are given an image of a menu. You are tasked with extracting all menu items and their details from this image. "
       "Every menu item will have the following fields, either in the image or you need to come up with them: with two excluseive fields: Name and Price (they have to be strictly extracted from the image)"
      
       "1. Original Title, type: \"String\" This should be the original title of the dish from the image This needs to be strictly extracted from the image and not generated by you."
       
       "9. id, type: \"int\" each item has a unique id"

       "Do not skip any menu item under any condition."
       "If you need do not have enough information about a specific item from the menu, try predicting the information about the menu."


       "Warnings: if the image is not clear, and that is not possible to extract more than two Original Dish Title and Price, you need to return a warning message saying that the image is not clear and please provide a better image. "
      
       "your output should be an array of the menu items with the fields from the above. "
       "the following fields needs to be in english. if not already in english, translate them to english. : Dish Title, Description, Ingredients"
       "Return the results in a structured JSON format"
       "Exclude any unnecessary text or decorations."
       "here are two examples of the output: "
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 1,"
       "            \"Original Title\": \"Pizza Margherita\","
       "            \"Dish Title\": \"Margherita Pizza\","
       "            \"Price\": 10,"
       "            \"Description\": \"A classic pizza with tomato sauce, mozzarella, and basil.\","
       "            \"Ingredients\": [\"tomato sauce\", \"mozzarella\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\", \"Lactose\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}
      
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 2,"
       "            \"Original Title\": \"Cavatelli\","
       "            \"Dish Title\": \"Cavatelli Pasta\","
       "            \"Price\": 25,"
       "            \"Description\": \"A traditional Italian handmade pasta served with a rich garlic-infused tomato sauce, fresh ricotta, and grated Parmesan, garnished with basil.\","
       "            \"Ingredients\": [\"Cavatelli pasta\", \"tomato sauce\", \"garlic\", \"ricotta\", \"Parmesan\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}
       `


      // Set up OpenAI API configuration
      const openai = new OpenAI({
        apiKey: key.OPENAI_API_KEY,
        dangerouslyAllowBrowser: true,
      });

      // Call the OpenAI API with the public image URL
      const apiResponse = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "user",
            content: prompt,
          },
          {
            role: "user",
            content: `data:image/jpeg;base64,${base64Image}`,
          },
        ],
        max_tokens: 3000,
      });

      // Use the response directly from the OpenAI API call
      const data = apiResponse;
      console.log(data);
      setMenuData(data.choices[0].message.content);
      console.log(menuData);
    } catch (error) {
      console.error("Error processing image:", error);
      alert("处理失败");
    } finally {
      setLoading(false);
    }
  };

  // Helper function to convert file to base64
  const convertFileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64String = reader.result.split(',')[1];
        console.log("Base64 String Length:", base64String.length);
        console.log("Base64 String Preview:", base64String.slice(0, 100));
        resolve(base64String);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const handleClosePreview = () => {
    setPreview(null);
    setSelectedFile(null);
  };

  return (
    <div className="min-h-screen bg-opacity-80 px-10">
    <div className="absolute top-0 left-0 w-full h-full" style={{ zIndex: -1 }}>
      <Aurora colorStops={["#f0b0ca", "#a89cdd", "#92a5f0"]} speed={0.5}/>
    </div>
      <div className="flex justify-center items-center h-screen">
        <div className="bg-transparent text-center">
          <Text family='Monoton' style={{ fontSize: 80, margin: 0, color: '#d8d2f0' }} onLoad={() => console.log('loaded Monoton')}>
            Menu Lens :)
          </Text>
          <div className="flex flex-col justify-center rounded-lg mx-4 rounded-xl">
            {loading ? (
              <div className="flex justify-center items-center">
                <Mosaic color={["#A3A4BC", "#7990A9", "#DABBAE", "#A3B7C3"]} size="medium" text="" textColor="" />
              </div>
            ) : (
              <>
                {!preview && <FileUpload onFileChange={handleFileChange} />}
                {preview && (
                  <div className="relative border-2 mx-auto pt-10 p-2 border-white border-opacity-5 bg-white bg-opacity-10 rounded-xl">
                    <img src={preview} alt="预览" className="w-64 h-64 mx-auto" />
                    <button
                      type="button"
                      onClick={handleClosePreview}
                      className="absolute top-0 right-0 mt-1 mr-1 bg-white bg-opacity-10 text-white rounded-xl px-2 py-1"
                    >
                      ↻ Back
                    </button>
                  </div>
                )}
                <div className="flex justify-center">
                  <button type="button" onClick={handleTranslateClick} className="mt-4 border-2 border-white border-opacity-5 bg-white bg-opacity-10 hover:bg-opacity-20 text-white font-bold py-2 px-4 rounded-2xl transition-all duration-300">
                    Translate
                  </button>
                </div>
                {/* {menuData && (
                  <pre className="mt-2 p-4 bg-gray-100">{JSON.stringify(menuData, null, 2)}</pre>
                )} */}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;