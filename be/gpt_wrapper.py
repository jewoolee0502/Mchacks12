import base64
import openai
import os
from dotenv import load_dotenv


load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


# Set up the OpenAI API key
openai.api_key = OPENAI_API_KEY


# Function to encode the image
def encode_image(image_path):
   with open(image_path, "rb") as image_file:
       return base64.b64encode(image_file.read()).decode("utf-8")


def test_endpoint():
   # Path to your image
   image_path = '/Users/peter.z/Desktop/codes/McHacks/Mchacks12/be/image_menu.jpeg'


   # Getting the Base64 string
   base64_image = encode_image(image_path)


   #Prompt to extract information
   prompt = """{"
       "You are a food and language expert. You are given an image of a menu. You are tasked with extracting the menu items and their details from this image. "
       "Every menu item will have the following fields, either in the image or you need to come up with them: with two excluseive fields: Name and Price (they have to be strictlyextracted from the image)"
      
       "1. Original Title, type: \"String\" This should be the original title of the dish from the image This needs to be strictly extracted from the image and not generated by you."
       "2. Dish Title, type: \"string\" This should be the original title translated to english, in a meaningful way, not just a translation. The dish title could be a single word or a short phrase. If "
       "the dish title need to be understood by middle school students, and give some context if needed, for example 'Primavera' could be or 'Primavera Pasta' because Primavera is not commonly understood in english by middle school students"
       "if the title is not known as a dish, for example 3 bacherotes, you need to return the directly translated title, with a short phrase that comes from the description extracted. it should be a very short phrase""
       "3. Price, type: "float" "
       "4. Description, type: \"string\" 1-2 sentence description of the dish if they are available from the image. extracted if they are available from the image, come up with it based on the dish title if not available."
       "the description should be translated to english is not already in english"
       "5. Ingredients, type: \"array of strings\" 2-3 key ingredients of the dish, As the field ingredients. Also extracted if they are available from the image, come up with it based on the dish title and Description if not available."
       "the ingredients should be translated to english if not already in english, also they need to be specific, for example not just 'tomato sauce' but 'tomato sauce, garlic, basil or not just 'meat' but 'beef, chicken, pork'"
       "6. Category, type: \"array of strings\" the category needs to be zero to many of the following categories:(Appetizers, Main Courses, Sides, Beverages, Desserts) but all items are belong to the 'ALL' category"
       "7. Allergy tags, type: \"array of strings\" the tags needs to contain zero to many of the following tags:(Peanuts, Treenuts, Milk, Eggs, Shellfish, Wheat, Soy, Fish, Gluten, Lactose)"
       "8. Image, type: \"empty array of strings\" "
       "9. id, type: \"int\" each item has a unique id"


       "Warnings:if the image is not clear, and that is not possible to extract more than two Original Dish Title and Price, you need to return a warning message saying that the image is not clear and please provide a better image. "
      
       "your output should be an array of the menu items with the fields from the above. "
       "the following fields needs to be in english. if not already in english, translate them to english. : Dish Title, Description, Ingredients"
       "Return the results in a structured JSON format"
       "Exclude any unnecessary text or decorations."
       "here are two examples of the output: "
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 1,"
       "            \"Original Title\": \"Pizza Margherita\","
       "            \"Dish Title\": \"Margherita Pizza\","
       "            \"Price\": 10,"
       "            \"Description\": \"A classic pizza with tomato sauce, mozzarella, and basil.\","
       "            \"Ingredients\": [\"tomato sauce\", \"mozzarella\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\", \"Lactose\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}
      
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 2,"
       "            \"Original Title\": \"Cavatelli\","
       "            \"Dish Title\": \"Cavatelli Pasta\","
       "            \"Price\": 25,"
       "            \"Description\": \"A traditional Italian handmade pasta served with a rich garlic-infused tomato sauce, fresh ricotta, and grated Parmesan, garnished with basil.\","
       "            \"Ingredients\": [\"Cavatelli pasta\", \"tomato sauce\", \"garlic\", \"ricotta\", \"Parmesan\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}"
   }"""


   response = openai.ChatCompletion.create(
       model="gpt-4o-mini",
       messages=[
           {
               "role": "user",
               "content": [
                   {
                       "type": "text",
                       "text": prompt,
                   },
                   {
                       "type": "image_url",
                       "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                   },
               ],
           }
       ],
   )


   return response.choices[0]['message']['content']


if __name__ == "__main__":
   response = test_endpoint()


   # Print the response
   if response:
       print("Extracted Menu Items:")
       print(response)



