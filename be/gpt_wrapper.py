import base64
import openai
import os
from dotenv import load_dotenv

# Set up the OpenAI API key
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY


# Function to encode the image
def encode_image(image_path):
   with open(image_path, "rb") as image_file:
       return base64.b64encode(image_file.read()).decode("utf-8")

def gpt_json(image_path):
   # Getting the Base64 string
   base64_image = encode_image(image_path)

   #Prompt to extract information
   prompt = """{"
       "You are a food and language expert. You are given an image of a menu. You are tasked with extracting all menu items and their details from this image. "
       "Every menu item will have the following fields, either in the image or you need to come up with them: with two excluseive fields: Name and Price (they have to be strictly extracted from the image)"
      
       "1. Original Title, type: \"String\" This should be the original title of the dish from the image This needs to be strictly extracted from the image and not generated by you."
       
       "9. id, type: \"int\" each item has a unique id"

       "Do not skip any menu item under any condition."
       "If you need do not have enough information about a specific item from the menu, try predicting the information about the menu."


       "Warnings: if the image is not clear, and that is not possible to extract more than two Original Dish Title and Price, you need to return a warning message saying that the image is not clear and please provide a better image. "
      
       "your output should be an array of the menu items with the fields from the above. "
       "the following fields needs to be in english. if not already in english, translate them to english. : Dish Title, Description, Ingredients"
       "Return the results in a structured JSON format"
       "Exclude any unnecessary text or decorations."
       "here are two examples of the output: "
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 1,"
       "            \"Original Title\": \"Pizza Margherita\","
       "            \"Dish Title\": \"Margherita Pizza\","
       "            \"Price\": 10,"
       "            \"Description\": \"A classic pizza with tomato sauce, mozzarella, and basil.\","
       "            \"Ingredients\": [\"tomato sauce\", \"mozzarella\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\", \"Lactose\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}
      
       "{"
       "    \"items\": ["
       "        {"
       "            \"id\": 2,"
       "            \"Original Title\": \"Cavatelli\","
       "            \"Dish Title\": \"Cavatelli Pasta\","
       "            \"Price\": 25,"
       "            \"Description\": \"A traditional Italian handmade pasta served with a rich garlic-infused tomato sauce, fresh ricotta, and grated Parmesan, garnished with basil.\","
       "            \"Ingredients\": [\"Cavatelli pasta\", \"tomato sauce\", \"garlic\", \"ricotta\", \"Parmesan\", \"basil\"],"
       "            \"Category\": [\"Main Courses\"],"
       "            \"Allergy tags\": [\"Gluten\"],"
       "            \"Image\": []"
       "        }"
       "    ]"
       "}"
   }"""


   response = openai.ChatCompletion.create(
       model="gpt-4o-mini",
       messages=[
           {
               "role": "user",
               "content": [
                   {
                       "type": "text",
                       "text": prompt,
                   },
                   {
                       "type": "image_url",
                       "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"},
                   },
               ],
           }
       ],
   )


   return response.choices[0]['message']['content']


if __name__ == "__main__":
   # Path to your image
   image_path = 'image_menu.jpg'
   response = gpt_json(image_path)

   # Print the response
   if response:
       print("Extracted Menu Items:")
       print(response)
